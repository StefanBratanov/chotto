plugins {
    id "application"
    id "com.diffplug.spotless" version "6.11.0"
    id "jacoco"
}

version = "0.0.1"
group = "chotto"

repositories {
    mavenCentral()
    maven { url "https://artifacts.consensys.net/public/maven/maven/" }
}

dependencies {

    implementation("ch.qos.logback:logback-core:1.4.4")
    implementation("ch.qos.logback:logback-classic:1.4.4")
    implementation("org.slf4j:slf4j-api:2.0.3")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.14.0")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.14.0")
    implementation("io.javalin:javalin:5.1.3")
    implementation("info.picocli:picocli:4.7.0")
    annotationProcessor("info.picocli:picocli-codegen:4.7.0")
    implementation("tech.pegasys:jblst:0.3.8")
    implementation("org.apache.tuweni:tuweni-units:2.3.0")
    implementation("com.networknt:json-schema-validator:1.0.73")
    implementation("gg.jte:jte:2.2.3")
    implementation("com.pivovarit:throwing-function:1.5.1")

    testImplementation("org.junit.jupiter:junit-jupiter:5.9.1")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.9.1")
    testImplementation("org.mockito:mockito-core:4.9.0")
    testImplementation("org.assertj:assertj-core:3.23.1")
    testImplementation("org.skyscreamer:jsonassert:1.5.1")
    testImplementation("io.javalin:javalin-testtools:5.1.3")
    testImplementation("org.mock-server:mockserver-netty-no-dependencies:5.14.0")
    testImplementation("org.awaitility:awaitility:4.2.0");
    testImplementation("io.github.hakky54:logcaptor:2.7.10");
}

application {
    mainClass.set("chotto.Chotto")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
    main {
        //register an output folder on the main SourceSet:
        output.dir(generatedResources, builtBy: "generateVersionTxt")
        //it is now a part of the 'main' classpath and will be a part of the jar
    }
}

//a task that generates the resources:
task generateVersionTxt {
    description "Creates a version.txt file with build info that is added to the root of the jar"
    doLast {
        new File(generatedResources).mkdirs()
        def generated = new File(generatedResources, "version.txt")
        generated.text = "Version: $rootProject.version"

    }
}

spotless {
    java {
        googleJavaFormat("1.13.0")
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}



